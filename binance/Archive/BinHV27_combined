# 导入必要的库和模块
from datetime import datetime
from functools import reduce
from freqtrade.persistence import Trade
from freqtrade.strategy import IStrategy, IntParameter, DecimalParameter, CategoricalParameter, merge_informative_pair, stoploss_from_open
from pandas import DataFrame
import freqtrade.vendor.qtpylib.indicators as qtpylib
import talib.abstract as ta
import numpy  # noqa

class BinHV27_combined(IStrategy):
    """
    多空混合策略，结合长期和短期策略，基于TSF指标切换方向
    原始作者：BinH (Slack用户)
    整合自：
    - BinHV27_long.py
    - BinHV27_short.py 
    - BinHV27_short.json
    """
    INTERFACE_VERSION = 2  # 策略接口版本 
    
    # 最小ROI配置（动态止损替代实际ROI设置）
    minimal_roi = {
        "0": 1  # 100% ROI意味着仅通过止损/止盈退出
    }

    # 优化后的买入参数默认值
    buy_params = {
        # 多头参数
        'entry_long_adx1': 25,    # 第一个多头入场条件的ADX阈值
        'entry_long_emarsi1': 20, # 第一个多头入场条件的EMA-RSI阈值
        'entry_long_adx2': 30,    # 第二个多头入场条件的ADX阈值  
        'entry_long_emarsi2': 20, # 第二个多头入场条件的EMA-RSI阈值
        'entry_long_adx3': 35,    # 第三个多头入场条件的ADX阈值
        'entry_long_emarsi3': 20, # 第三个多头入场条件的EMA-RSI阈值
        'entry_long_adx4': 30,    # 第四个多头入场条件的ADX阈值
        'entry_long_emarsi4': 25, # 第四个多头入场条件的EMA-RSI阈值
        
        # 空头参数
        'entry_short_adx1': 62,   # 第一个空头入场条件的ADX阈值
        'entry_short_emarsi1': 29,# 第一个空头入场条件的EMA-RSI阈值
        'entry_short_adx2': 29,   # 第二个空头入场条件的ADX阈值
        'entry_short_emarsi2': 30,# 第二个空头入场条件的EMA-RSI阈值
        'entry_short_adx3': 33,   # 第三个空头入场条件的ADX阈值
        'entry_short_emarsi3': 22,# 第三个空头入场条件的EMA-RSI阈值
        'entry_short_adx4': 88,   # 第四个空头入场条件的ADX阈值
        'entry_short_emarsi4': 57 # 第四个空头入场条件的EMA-RSI阈值
    }

    # 卖出参数配置
    sell_params = {
        # 多头止损参数
        "pHSL_long": -0.25,     # 多头硬止损比例（例如-0.25表示25%亏损）
        "pPF_1_long": 0.012,    # 多头盈利阶段1起始点（1.2%）
        "pPF_2_long": 0.05,     # 多头盈利阶段2起始点（5%）
        "pSL_1_long": 0.01,     # 多头阶段1止损比例（1%）
        "pSL_2_long": 0.04,     # 多头阶段2止损比例（4%）
        
        # 空头止损参数  
        "pHSL_short": -0.863,   # 空头硬止损比例
        "pPF_1_short": 0.018,   # 空头盈利阶段1起始点（1.8%）
        "pPF_2_short": 0.197,   # 空头盈利阶段2起始点（19.7%）
        "pSL_1_short": 0.015,   # 空头阶段1止损比例（1.5%）
        "pSL_2_short": 0.157,   # 空头阶段2止损比例（15.7%）

        # 杠杆设置
        "leverage_num": 1,      # 使用的杠杆倍数

        # 退出参数
        'exit_long_emarsi1': 75,  # 多头退出条件1的EMA-RSI阈值
        'exit_long_adx2': 30,     # 多头退出条件2的ADX阈值
        'exit_long_emarsi2': 80,  # 多头退出条件2的EMA-RSI阈值
        'exit_long_emarsi3': 75,  # 多头退出条件3的EMA-RSI阈值
        'exit_short_emarsi1': 30, # 空头退出条件1的EMA-RSI阈值
        'exit_short_adx2': 21,    # 空头退出条件2的ADX阈值
        'exit_short_emarsi2': 71, # 空头退出条件2的EMA-RSI阈值
        'exit_short_emarsi3': 72, # 空头退出条件3的EMA-RSI阈值

        # 退出条件开关
        "exit_long_1": True,    # 启用多头退出条件1
        "exit_long_2": True,    # 启用多头退出条件2
        "exit_long_3": True,    # 启用多头退出条件3
        "exit_long_4": True,    # 启用多头退出条件4
        "exit_long_5": True,    # 启用多头退出条件5
        "exit_short_1": False,  # 禁用空头退出条件1
        "exit_short_2": True,   # 启用空头退出条件2
        "exit_short_3": True,   # 启用空头退出条件3
        "exit_short_4": True,   # 启用空头退出条件4
        "exit_short_5": False,  # 禁用空头退出条件5
    }

    # 基础策略参数
    stoploss = -0.99           # 硬止损占位符（实际由custom_stoploss控制）
    timeframe = '5m'           # 主交易时间框架（5分钟）
    inf_timeframe = '4h'       # 信息时间框架（4小时）
    process_only_new_candles = True  # 仅处理新K线
    startup_candle_count = 240 # 初始化需要的历史K线数量（240根）
    use_custom_stoploss = True # 启用自定义止损逻辑
    can_short = True           # 允许做空交易

    #==================== 参数定义区域 ====================
    # 注意：所有参数都保留原始定义的顺序和结构

    # 入场参数（多头）
    entry_optimize = True  # 是否优化入场参数
    entry_long_adx1 = IntParameter(low=10, high=100, default=25, space='buy', optimize=entry_optimize)
    entry_long_emarsi1 = IntParameter(low=10, high=100, default=20, space='buy', optimize=entry_optimize)
    entry_long_adx2 = IntParameter(low=20, high=100, default=30, space='buy', optimize=entry_optimize)
    entry_long_emarsi2 = IntParameter(low=20, high=100, default=20, space='buy', optimize=entry_optimize)
    entry_long_adx3 = IntParameter(low=10, high=100, default=35, space='buy', optimize=entry_optimize)
    entry_long_emarsi3 = IntParameter(low=10, high=100, default=20, space='buy', optimize=entry_optimize)
    entry_long_adx4 = IntParameter(low=20, high=100, default=30, space='buy', optimize=entry_optimize)
    entry_long_emarsi4 = IntParameter(low=20, high=100, default=25, space='buy', optimize=entry_optimize)

    # 入场参数（空头）
    entry_short_adx1 = IntParameter(low=10, high=100, default=25, space='buy', optimize=entry_optimize)
    entry_short_emarsi1 = IntParameter(low=10, high=100, default=20, space='buy', optimize=entry_optimize)
    entry_short_adx2 = IntParameter(low=20, high=100, default=30, space='buy', optimize=entry_optimize)
    entry_short_emarsi2 = IntParameter(low=20, high=100, default=20, space='buy', optimize=entry_optimize)
    entry_short_adx3 = IntParameter(low=10, high=100, default=35, space='buy', optimize=entry_optimize)
    entry_short_emarsi3 = IntParameter(low=10, high=100, default=20, space='buy', optimize=entry_optimize)
    entry_short_adx4 = IntParameter(low=20, high=100, default=30, space='buy', optimize=entry_optimize)
    entry_short_emarsi4 = IntParameter(low=20, high=100, default=25, space='buy', optimize=entry_optimize)

    # 动态止损参数
    trailing_optimize = False  # 是否优化追踪止损参数
    # 多头止损参数
    pHSL_long = DecimalParameter(-0.990, -0.040, default=-0.08, decimals=3, space='sell', optimize=trailing_optimize)
    pPF_1_long = DecimalParameter(0.008, 0.100, default=0.016, decimals=3, space='sell', optimize=trailing_optimize)
    pSL_1_long = DecimalParameter(0.008, 0.100, default=0.011, decimals=3, space='sell', optimize=trailing_optimize)
    pPF_2_long = DecimalParameter(0.040, 0.200, default=0.080, decimals=3, space='sell', optimize=trailing_optimize)
    pSL_2_long = DecimalParameter(0.040, 0.200, default=0.040, decimals=3, space='sell', optimize=trailing_optimize)
    # 空头止损参数
    pHSL_short = DecimalParameter(-0.990, -0.040, default=-0.08, decimals=3, space='sell', optimize=trailing_optimize)
    pPF_1_short = DecimalParameter(0.008, 0.100, default=0.016, decimals=3, space='sell', optimize=trailing_optimize)
    pSL_1_short = DecimalParameter(0.008, 0.100, default=0.011, decimals=3, space='sell', optimize=trailing_optimize)
    pPF_2_short = DecimalParameter(0.040, 0.200, default=0.080, decimals=3, space='sell', optimize=trailing_optimize)
    pSL_2_short = DecimalParameter(0.040, 0.200, default=0.040, decimals=3, space='sell', optimize=trailing_optimize)

    # 离场参数
    exit_optimize = True  # 是否优化离场参数
    exit_long_adx2 = IntParameter(low=10, high=100, default=30, space='sell', optimize=exit_optimize)
    exit_long_emarsi1 = IntParameter(low=10, high=100, default=75, space='sell', optimize=exit_optimize)
    exit_long_emarsi2 = IntParameter(low=20, high=100, default=80, space='sell', optimize=exit_optimize)
    exit_long_emarsi3 = IntParameter(low=20, high=100, default=75, space='sell', optimize=exit_optimize)
    exit_short_adx2 = IntParameter(low=10, high=100, default=30, space='sell', optimize=exit_optimize)
    exit_short_emarsi1 = IntParameter(low=10, high=100, default=75, space='sell', optimize=exit_optimize)
    exit_short_emarsi2 = IntParameter(low=20, high=100, default=80, space='sell', optimize=exit_optimize)
    exit_short_emarsi3 = IntParameter(low=20, high=100, default=75, space='sell', optimize=exit_optimize)

    # 退出条件开关参数
    exit2_optimize = True  # 是否优化开关参数
    exit_long_1 = CategoricalParameter([True, False], default=True, space="sell", optimize=exit2_optimize)
    exit_long_2 = CategoricalParameter([True, False], default=True, space="sell", optimize=exit2_optimize)
    exit_long_3 = CategoricalParameter([True, False], default=True, space="sell", optimize=exit2_optimize)
    exit_long_4 = CategoricalParameter([True, False], default=True, space="sell", optimize=exit2_optimize)
    exit_long_5 = CategoricalParameter([True, False], default=True, space="sell", optimize=exit2_optimize)
    exit_short_1 = CategoricalParameter([True, False], default=True, space="sell", optimize=exit2_optimize)
    exit_short_2 = CategoricalParameter([True, False], default=True, space="sell", optimize=exit2_optimize)
    exit_short_3 = CategoricalParameter([True, False], default=True, space="sell", optimize=exit2_optimize)
    exit_short_4 = CategoricalParameter([True, False], default=True, space="sell", optimize=exit2_optimize)
    exit_short_5 = CategoricalParameter([True, False], default=True, space="sell", optimize=exit2_optimize)

    # 杠杆参数
    leverage_optimize = False  # 是否优化杠杆参数
    leverage_num = IntParameter(low=1, high=5, default=1, space='sell', optimize=leverage_optimize)

    #==================== 自定义止损逻辑 ====================
    def custom_stoploss(self, pair: str, trade: Trade, current_time: datetime,
                        current_rate: float, current_profit: float, **kwargs) -> float:
        """
        动态追踪止损计算逻辑
        参数说明：
        - pair: 交易对名称
        - trade: Trade对象包含持仓信息
        - current_time: 当前时间
        - current_rate: 当前价格
        - current_profit: 当前盈亏比例（正数表示盈利）
        返回：止损比例（负数，例如-0.1表示10%亏损时止损）
        """
        # 根据持仓方向选择参数集
        if trade.is_short:  # 空头持仓
            HSL = self.pHSL_short.value  # 硬止损比例
            PF_1 = self.pPF_1_short.value  # 盈利阶段1起始点
            SL_1 = self.pSL_1_short.value  # 阶段1止损比例
            PF_2 = self.pPF_2_short.value  # 盈利阶段2起始点
            SL_2 = self.pSL_2_short.value  # 阶段2止损比例
        else:  # 多头持仓
            HSL = self.pHSL_long.value
            PF_1 = self.pPF_1_long.value
            SL_1 = self.pSL_1_long.value
            PF_2 = self.pPF_2_long.value
            SL_2 = self.pSL_2_long.value

        # 分阶段计算止损比例
        if current_profit > PF_2:
            # 高于阶段2：动态递增止损
            sl_profit = SL_2 + (current_profit - PF_2)
        elif current_profit > PF_1:
            # 阶段1-2之间：线性插值计算
            sl_profit = SL_1 + ((current_profit - PF_1) * (SL_2 - SL_1) / (PF_2 - PF_1))
        else:
            # 低于阶段1：硬止损
            sl_profit = HSL

        # 处理空头计算的特殊转换
        if trade.is_short:
            # 空头止损计算需要转换比例
            if (-1 + ((1 - sl_profit) / (1 - current_profit))) <= 0:
                return 1  # 返回100%表示立即止损
        else:
            # 多头止损计算
            if (1 - ((1 + sl_profit) / (1 + current_profit))) <= 0:
                return 1

        # 使用框架函数计算实际止损比例
        return stoploss_from_open(sl_profit, current_profit, is_short=trade.is_short)

    #==================== 指标计算 ====================
    def informative_pairs(self):
        """生成需要分析的币种/时间框架组合"""
        pairs = self.dp.current_whitelist()  # 获取当前交易对白名单
        informative_pairs = [(pair, self.inf_timeframe) for pair in pairs]
        return informative_pairs

    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:
        """计算所有技术指标，返回包含指标的数据框"""
        
        # 计算RSI（相对强弱指数）
        dataframe['rsi'] = numpy.nan_to_num(ta.RSI(dataframe, timeperiod=5))  # 5周期RSI
        
        # 计算EMA-RSI（RSI的指数移动平均）
        rsiframe = DataFrame(dataframe['rsi']).rename(columns={'rsi': 'close'})  # 转换格式
        dataframe['emarsi'] = numpy.nan_to_num(ta.EMA(rsiframe, timeperiod=5))  # 5周期EMA
        
        # 计算ADX（平均趋向指数）
        dataframe['adx'] = numpy.nan_to_num(ta.ADX(dataframe))  # 默认14周期ADX
        
        # 计算负方向指标（-DI）
        dataframe['minusdi'] = numpy.nan_to_num(ta.MINUS_DI(dataframe))  # 14周期-DI
        minusdiframe = DataFrame(dataframe['minusdi']).rename(columns={'minusdi': 'close'})
        dataframe['minusdiema'] = numpy.nan_to_num(ta.EMA(minusdiframe, timeperiod=25))  # 25周期EMA
        
        # 计算正方向指标（+DI）
        dataframe['plusdi'] = numpy.nan_to_num(ta.PLUS_DI(dataframe))  # 14周期+DI
        plusdiframe = DataFrame(dataframe['plusdi']).rename(columns={'plusdi': 'close'})
        dataframe['plusdiema'] = numpy.nan_to_num(ta.EMA(plusdiframe, timeperiod=5))  # 5周期EMA
        
        # 计算均线系统
        dataframe['lowsma'] = numpy.nan_to_num(ta.EMA(dataframe, timeperiod=60))  # 60周期EMA
        dataframe['highsma'] = numpy.nan_to_num(ta.EMA(dataframe, timeperiod=120))  # 120周期EMA
        dataframe['fastsma'] = numpy.nan_to_num(ta.SMA(dataframe, timeperiod=120))  # 120周期SMA
        dataframe['slowsma'] = numpy.nan_to_num(ta.SMA(dataframe, timeperiod=240))  # 240周期SMA
        
        # 趋势判断指标
        dataframe['bigup'] = dataframe['fastsma'].gt(dataframe['slowsma']) & (  # 快线在慢线上方
            (dataframe['fastsma'] - dataframe['slowsma']) > dataframe['close'] / 300)  # 差值超过收盘价的0.33%
        dataframe['bigdown'] = ~dataframe['bigup']  # 反向条件
        
        # 趋势变化指标
        dataframe['trend'] = dataframe['fastsma'] - dataframe['slowsma']  # 快慢线差值
        dataframe['preparechangetrend'] = dataframe['trend'].gt(dataframe['trend'].shift())  # 趋势变化准备
        dataframe['preparechangetrendconfirm'] = dataframe['preparechangetrend'] & dataframe['trend'].shift().gt(
            dataframe['trend'].shift(2))  # 确认趋势变化
        dataframe['continueup'] = dataframe['slowsma'].gt(dataframe['slowsma'].shift()) & dataframe[
            'slowsma'].shift().gt(dataframe['slowsma'].shift(2))  # 持续上升趋势
        dataframe['delta'] = dataframe['fastsma'] - dataframe['fastsma'].shift()  # 快线变化量
        dataframe['slowingdown'] = dataframe['delta'].lt(dataframe['delta'].shift())  # 上升速度减缓
        
        # 布林带指标
        bollinger = qtpylib.bollinger_bands(qtpylib.typical_price(dataframe), window=20, stds=2)
        dataframe['bb_lowerband'] = bollinger['lower']  # 下轨
        dataframe['bb_upperband'] = bollinger['upper']  # 上轨
        dataframe['bb_middleband'] = bollinger['mid']   # 中轨

        # 合并4小时级别数据
        inf_dataframe = self.dp.get_pair_dataframe(pair=metadata['pair'], timeframe=self.inf_timeframe)
        # 计算4小时级别指标
        inf_dataframe['hlc3'] = ta.TYPPRICE(inf_dataframe)  # 典型价格（(高+低+收)/3）
        inf_dataframe['tsf'] = ta.TSF(inf_dataframe['hlc3'], timeperiod=2)  # 时间序列预测指标
        # 生成多空允许信号
        inf_dataframe['allow_long'] = ((inf_dataframe['tsf'] / inf_dataframe['hlc3']) > 1.01)  # TSF高于当前价1%允许做多
        inf_dataframe['allow_short'] = ((inf_dataframe['tsf'] / inf_dataframe['hlc3']) < 0.99) # TSF低于当前价1%允许做空
        
        # 合并多时间框架数据
        dataframe = merge_informative_pair(
            dataframe, 
            inf_dataframe, 
            self.timeframe, 
            self.inf_timeframe, 
            ffill=True  # 前向填充缺失值
        )

        return dataframe

    #==================== 入场逻辑 ====================
    def populate_entry_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:
        """生成入场信号，设置enter_long和enter_short列"""
        
        # 初始化标签列
        dataframe.loc[:, 'enter_tag'] = ''
        long_conditions = []
        short_conditions = []

        # 多头入场条件1
        long_entry_1 = (
            dataframe[f'allow_long_{self.inf_timeframe}'] &      # 4小时级别允许做多
            dataframe['slowsma'].gt(0) &                         # 慢速均线>0（过滤异常值）
            dataframe['close'].lt(dataframe['highsma']) &        # 收盘价低于高速均线
            dataframe['close'].lt(dataframe['lowsma']) &         # 收盘价低于低速均线
            dataframe['minusdi'].gt(dataframe['minusdiema']) &   # -DI大于其EMA（趋势强度）
            dataframe['rsi'].ge(dataframe['rsi'].shift()) &      # RSI不低于前值（动量维持）
            ~dataframe['preparechangetrend'] &                   # 无趋势变化信号
            ~dataframe['continueup'] &                           # 不处于持续上涨
            dataframe['adx'].gt(self.entry_long_adx1.value) &    # ADX超过参数阈值
            dataframe['bigdown'] &                               # 处于下降趋势（快线在慢线下）
            dataframe['emarsi'].le(self.entry_long_emarsi1.value) # EMA-RSI低于阈值
        )
        # 添加标签
        long_conditions.append(long_entry_1)
        dataframe.loc[long_entry_1, 'enter_tag'] += 'long_entry_1 '

        # 多头入场条件2（结构类似，条件参数不同）
        long_entry_2 = (
            dataframe[f'allow_long_{self.inf_timeframe}'] &
            dataframe['slowsma'].gt(0) &
            dataframe['close'].lt(dataframe['highsma']) &
            dataframe['close'].lt(dataframe['lowsma']) &
            dataframe['minusdi'].gt(dataframe['minusdiema']) &
            dataframe['rsi'].ge(dataframe['rsi'].shift()) &
            ~dataframe['preparechangetrend'] &
            dataframe['continueup'] &  # 此处条件不同：允许持续上涨
            dataframe['adx'].gt(self.entry_long_adx2.value) &
            dataframe['bigdown'] &
            dataframe['emarsi'].le(self.entry_long_emarsi2.value)
        )
        long_conditions.append(long_entry_2)
        dataframe.loc[long_entry_2, 'enter_tag'] += 'long_entry_2 '

        # 多头入场条件3
        long_entry_3 = (
            dataframe[f'allow_long_{self.inf_timeframe}'] &
            dataframe['slowsma'].gt(0) &
            dataframe['close'].lt(dataframe['highsma']) &
            dataframe['close'].lt(dataframe['lowsma']) &
            dataframe['minusdi'].gt(dataframe['minusdiema']) &
            dataframe['rsi'].ge(dataframe['rsi'].shift()) &
            ~dataframe['continueup'] &  # 不允许持续上涨
            dataframe['adx'].gt(self.entry_long_adx3.value) &
            dataframe['bigup'] &        # 处于上升趋势
            dataframe['emarsi'].le(self.entry_long_emarsi3.value)
        )
        long_conditions.append(long_entry_3)
        dataframe.loc[long_entry_3, 'enter_tag'] += 'long_entry_3 '

        # 多头入场条件4
        long_entry_4 = (
            dataframe[f'allow_long_{self.inf_timeframe}'] &
            dataframe['slowsma'].gt(0) &
            dataframe['close'].lt(dataframe['highsma']) &
            dataframe['close'].lt(dataframe['lowsma']) &
            dataframe['minusdi'].gt(dataframe['minusdiema']) &
            dataframe['rsi'].ge(dataframe['rsi'].shift()) &
            dataframe['continueup'] &    # 要求持续上涨
            dataframe['adx'].gt(self.entry_long_adx4.value) &
            dataframe['bigup'] &
            dataframe['emarsi'].le(self.entry_long_emarsi4.value)
        )
        long_conditions.append(long_entry_4)
        dataframe.loc[long_entry_4, 'enter_tag'] += 'long_entry_4 '

        # 组合所有多头条件（OR逻辑）
        if long_conditions:
            dataframe.loc[
                reduce(lambda x, y: x | y, long_conditions),
                'enter_long'
            ] = 1
        else:
            # 无任何条件满足时设置默认值
            dataframe.loc[(), ['enter_long', 'enter_tag']] = (0, 'no_long_entry')

        # 空头入场条件1（结构类似，条件方向相反）
        short_entry_1 = (
            dataframe[f'allow_short_{self.inf_timeframe}'] &  # 4小时允许做空
            dataframe['slowsma'].gt(0) &
            dataframe['close'].lt(dataframe['highsma']) &
            dataframe['close'].lt(dataframe['lowsma']) &
            dataframe['minusdi'].gt(dataframe['minusdiema']) &
            dataframe['rsi'].ge(dataframe['rsi'].shift()) &
            ~dataframe['preparechangetrend'] &
            ~dataframe['continueup'] &
            dataframe['adx'].gt(self.entry_short_adx1.value) &
            dataframe['bigdown'] &
            dataframe['emarsi'].le(self.entry_short_emarsi1.value)
        )
        short_conditions.append(short_entry_1)
        dataframe.loc[short_entry_1, 'enter_tag'] += 'short_entry_1 '

        # 空头入场条件2
        short_entry_2 = (
            dataframe[f'allow_short_{self.inf_timeframe}'] &
            dataframe['slowsma'].gt(0) &
            dataframe['close'].lt(dataframe['highsma']) &
            dataframe['close'].lt(dataframe['lowsma']) &
            dataframe['minusdi'].gt(dataframe['minusdiema']) &
            dataframe['rsi'].ge(dataframe['rsi'].shift()) &
            ~dataframe['preparechangetrend'] &
            dataframe['continueup'] &  # 允许持续上涨
            dataframe['adx'].gt(self.entry_short_adx2.value) &
            dataframe['bigdown'] &
            dataframe['emarsi'].le(self.entry_short_emarsi2.value)
        )
        short_conditions.append(short_entry_2)
        dataframe.loc[short_entry_2, 'enter_tag'] += 'short_entry_2 '

        # 空头入场条件3
        short_entry_3 = (
            dataframe[f'allow_short_{self.inf_timeframe}'] &
            dataframe['slowsma'].gt(0) &
            dataframe['close'].lt(dataframe['highsma']) &
            dataframe['close'].lt(dataframe['lowsma']) &
            dataframe['minusdi'].gt(dataframe['minusdiema']) &
            dataframe['rsi'].ge(dataframe['rsi'].shift()) &
            ~dataframe['continueup'] &  # 不允许持续上涨
            dataframe['adx'].gt(self.entry_short_adx3.value) &
            dataframe['bigup'] &        # 处于上升趋势（逆向做空）
            dataframe['emarsi'].le(self.entry_short_emarsi3.value)
        )
        short_conditions.append(short_entry_3)
        dataframe.loc[short_entry_3, 'enter_tag'] += 'short_entry_3 '

        # 空头入场条件4
        short_entry_4 = (
            dataframe[f'allow_short_{self.inf_timeframe}'] &
            dataframe['slowsma'].gt(0) &
            dataframe['close'].lt(dataframe['highsma']) &
            dataframe['close'].lt(dataframe['lowsma']) &
            dataframe['minusdi'].gt(dataframe['minusdiema']) &
            dataframe['rsi'].ge(dataframe['rsi'].shift()) &
            dataframe['continueup'] &    # 要求持续上涨
            dataframe['adx'].gt(self.entry_short_adx4.value) &
            dataframe['bigup'] &
            dataframe['emarsi'].le(self.entry_short_emarsi4.value)
        )
        short_conditions.append(short_entry_4)
        dataframe.loc[short_entry_4, 'enter_tag'] += 'short_entry_4 '

        # 组合所有空头条件
        if short_conditions:
            dataframe.loc[
                reduce(lambda x, y: x | y, short_conditions),
                'enter_short'
            ] = 1
        else:
            dataframe.loc[(), ['enter_short', 'enter_tag']] = (0, 'no_short_entry')

        return dataframe

    #==================== 离场逻辑 ====================
    def populate_exit_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:
        """基础离场设置（实际逻辑在custom_exit实现）"""
        # 初始化列
        dataframe.loc[(), ['exit_short', 'exit_tag']] = (0, 'no_short_exit')
        dataframe.loc[(), ['exit_long', 'exit_tag']] = (0, 'no_long_exit')
        return dataframe

    def custom_exit(self, pair: str, trade: Trade, current_time: 'datetime', current_rate: float,
                    current_profit: float, **kwargs):
        """自定义离场条件（逐条检查所有退出条件）"""
        
        # 获取最新K线数据
        dataframe, _ = self.dp.get_analyzed_dataframe(pair, self.timeframe)
        last_candle = dataframe.iloc[-1].squeeze()  # 转换为Series

        # 如果已达到止盈阶段，不提前退出
        if (current_profit >= self.pPF_1_long.value) and not trade.is_short:
            return None
        if (current_profit >= self.pPF_1_short.value) and trade.is_short:
            return None

        # 多头退出条件1
        if self.exit_long_1.value and not trade.is_short:
            if (
                (~last_candle['preparechangetrendconfirm']) &  # 无趋势变化确认
                (~last_candle['continueup']) &                 # 不处于持续上涨
                (last_candle['close'] > last_candle['lowsma'] or last_candle['close'] > last_candle['highsma']) &  # 价格突破均线
                (last_candle['highsma'] > 0) &                 # 均线有效
                (last_candle['bigdown'])                       # 处于下降趋势
            ):
                return "exit_long_1"

        # 多头退出条件2
        if self.exit_long_2.value and not trade.is_short:
            if (
                (~last_candle['preparechangetrendconfirm']) &
                (~last_candle['continueup']) &
                (last_candle['close'] > last_candle['highsma']) &  # 价格突破高速均线
                (last_candle['highsma'] > 0) &
                (last_candle['emarsi'] > self.exit_long_emarsi1.value or last_candle['close'] > last_candle['slowsma']) &  # EMA-RSI超阈值或价格突破慢线
                (last_candle['bigdown'])
            ):
                return "exit_long_2"

        # 多头退出条件3
        if self.exit_long_3.value and not trade.is_short:
            if (
                (~last_candle['preparechangetrendconfirm']) &
                (last_candle['close'] > last_candle['highsma']) &
                (last_candle['highsma'] > 0) &
                (last_candle['adx'] > self.exit_long_adx2.value) &  # ADX超阈值
                (last_candle['emarsi'] >= self.exit_long_emarsi2.value) &  # EMA-RSI达标
                (last_candle['bigup'])  # 处于上升趋势（逆势离场）
            ):
                return "exit_long_3"

        # 多头退出条件4
        if self.exit_long_4.value and not trade.is_short:
            if (
                (last_candle['preparechangetrendconfirm']) &  # 趋势变化确认
                (~last_candle['continueup']) &
                (last_candle['slowingdown']) &                # 上升速度减缓
                (last_candle['emarsi'] >= self.exit_long_emarsi3.value) &
                (last_candle['slowsma'] > 0)
            ):
                return "exit_long_4"

        # 多头退出条件5
        if self.exit_long_5.value and not trade.is_short:
            if (
                (last_candle['preparechangetrendconfirm']) &
                (last_candle['minusdi'] < last_candle['plusdi']) &  # +DI超过-DI
                (last_candle['close'] > last_candle['lowsma']) &
                (last_candle['slowsma'] > 0)
            ):
                return "exit_long_5"

        # 空头退出条件1（结构类似，方向相反）
        if self.exit_short_1.value and trade.is_short:
            if (
                (~last_candle['preparechangetrendconfirm']) &
                (~last_candle['continueup']) &
                (last_candle['close'] > last_candle['lowsma'] or last_candle['close'] > last_candle['highsma']) &
                (last_candle['highsma'] > 0) &
                (last_candle['bigdown'])
            ):
                return "exit_short_1"

        # 空头退出条件2
        if self.exit_short_2.value and trade.is_short:
            if (
                (~last_candle['preparechangetrendconfirm']) &
                (~last_candle['continueup']) &
                (last_candle['close'] > last_candle['highsma']) &
                (last_candle['highsma'] > 0) &
                (last_candle['emarsi'] > self.exit_short_emarsi1.value or last_candle['close'] > last_candle['slowsma']) &
                (last_candle['bigdown'])
            ):
                return "exit_short_2"

        # 空头退出条件3
        if self.exit_short_3.value and trade.is_short:
            if (
                (~last_candle['preparechangetrendconfirm']) &
                (last_candle['close'] > last_candle['highsma']) &
                (last_candle['highsma'] > 0) &
                (last_candle['adx'] > self.exit_short_adx2.value) &
                (last_candle['emarsi'] >= self.exit_short_emarsi2.value) &
                (last_candle['bigup'])
            ):
                return "exit_short_3"

        # 空头退出条件4
        if self.exit_short_4.value and trade.is_short:
            if (
                (last_candle['preparechangetrendconfirm']) &
                (~last_candle['continueup']) &
                (last_candle['slowingdown']) &
                (last_candle['emarsi'] >= self.exit_short_emarsi3.value) &
                (last_candle['slowsma'] > 0)
            ):
                return "exit_short_4"

        # 空头退出条件5
        if self.exit_short_5.value and trade.is_short:
            if (
                (last_candle['preparechangetrendconfirm']) &
                (last_candle['minusdi'] < last_candle['plusdi']) &
                (last_candle['close'] > last_candle['lowsma']) &
                (last_candle['slowsma'] > 0)
            ):
                return "exit_short_5"

    #==================== 杠杆控制 ====================
    def leverage(self, pair: str, current_time: datetime, current_rate: float,
                 proposed_leverage: float, max_leverage: float, side: str,
                 **kwargs) -> float:
        """返回预设的杠杆倍数"""
        return self.leverage_num.value
