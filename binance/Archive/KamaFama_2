# --- Do not remove these libs ---
from freqtrade.strategy.interface  import IStrategy  # Freqtrade策略接口 
from typing import Dict, List  # 类型提示库 
from functools import reduce  # 函数工具库 
from pandas import DataFrame, Series, DatetimeIndex, merge  # 数据处理库Pandas 
# -------------------------------- 
import talib.abstract  as ta  # TA-Lib技术指标库 
import pandas_ta as pta  # Pandas_TA技术指标扩展库 
import numpy as np  # 数学计算库 
import pandas as pd  # 数据处理库Pandas 
import warnings, datetime  # 警告处理和日期时间库 
import freqtrade.vendor.qtpylib.indicators  as qtpylib  # Freqtrade自带的指标库 
from technical.util  import resample_to_interval, resampled_merge  # 技术分析工具库 
from datetime import datetime, timedelta  # 日期时间处理 
from freqtrade.persistence  import Trade, Order  # Freqtrade持久化模块 
from freqtrade.strategy  import stoploss_from_open, DecimalParameter, IntParameter, CategoricalParameter  # 策略相关工具 
import technical.indicators  as ftt  # 技术指标库 
from functools import reduce  # 函数工具库 
 
pd.options.mode.chained_assignment  = None  # 禁用链式赋值警告 
 
# ------- 策略由Mastaaa1987开发 
 
def williams_r(dataframe: DataFrame, period: int = 14) -> Series:
    """计算威廉姆斯%R指标 
    威廉姆斯%R用于衡量当前收盘价在最近N天内的高低价区间中的位置。
    指标范围从-100（最低）到0（最高）。
    """
    highest_high = dataframe["high"].rolling(center=False, window=period).max()  # 计算周期内的最高价 
    lowest_low = dataframe["low"].rolling(center=False, window=period).min()  # 计算周期内的最低价 
 
    WR = Series(
        (highest_high - dataframe["close"]) / (highest_high - lowest_low),
        name=f"{period} Williams %R",
    )
 
    return WR * -100  # 返回百分比并反转符号 
 
class KamaFama_2(IStrategy):
    INTERFACE_VERSION = 2  # 策略接口版本 
 
    @property 
    def protections(self):
        """定义保护机制"""
        return [
            {
                "method": "LowProfitPairs",  # 使用低利润对保护 
                "lookback_period_candles": 60,  # 回顾60根蜡烛 
                "trade_limit": 1,  # 每个时间段内最多交易一次 
                "stop_duration_candles": 60,  # 停止交易持续60根蜡烛 
                "required_profit": -0.05  # 允许的最大亏损为5%
            },
            {
                "method": "CooldownPeriod",  # 冷却期保护 
                "stop_duration_candles": 5  # 冷却期持续5根蜡烛 
            }
        ]
 
    minimal_roi = {  # 最小回报率设置 
        "0": 1  # 在0个周期内至少获得1倍收益 
    }
    cc = {}  # 状态存储字典 
 
    # 止损设置 
    stoploss = -0.25  # 最大允许亏损25%
 
    # 卖出参数 
    sell_fastx = IntParameter(50, 100, default=84, space='sell', optimize=True)  # 快速卖出指标参数 
 
    # 追踪止损设置 
    trailing_stop = False  # 不启用追踪止损 
    trailing_stop_positive = 0.002  # 追踪止损正向偏移 
    trailing_stop_positive_offset = 0.05  # 追踪止损偏移量 
    trailing_only_offset_is_reached = True  # 只有当偏移达到时才启用追踪止损 
 
    use_custom_stoploss = True  # 使用自定义止损函数 
 
    order_types = {  # 订单类型设置 
        'entry': 'market',  # 入场订单类型为市价单 
        'exit': 'market',  # 出场订单类型为市价单 
        'emergency_exit': 'market',  # 紧急出场为市价单 
        'force_entry': 'market',  # 强制入场为市价单 
        'force_exit': "market",  # 强制出场为市价单 
        'stoploss': 'market',  # 止损订单为市价单 
        'stoploss_on_exchange': False,  # 不在交易所执行止损 
        'stoploss_on_exchange_interval': 60,  # 止损在交易所执行的时间间隔 
        'stoploss_on_exchange_market_ratio': 0.99  # 止损市场比例 
    }
 
    ## 可选订单时间有效设置 
    order_time_in_force = {  # 订单时间有效设置 
        'entry': 'gtc',  # 入场订单有效至取消 
        'exit': 'gtc'   # 出场订单有效至取消 
    }
 
    # 策略最优时间框架 
    timeframe = '5m'  # 使用5分钟K线 
 
    process_only_new_candles = True  # 只处理新生成的蜡烛 
 
    startup_candle_count = 400  # 启动时需要的初始蜡烛数量 
 
    plot_config = {  # 绘图配置 
        'main_plot': {  # 主图 
            "mama": {'color': '#d0da3e'},  # MAMA指标颜色 
            "fama": {'color': '#da3eb8'},  # FAMA指标颜色 
            "kama": {'color': '#3edad8'}   # KAMA指标颜色 
        },
        "subplots": {  # 子图 
            "fastk": {  # 快速K线图 
                "fastk": {'color': '#da3e3e'}  # 颜色设置 
            },
            "cond": {  # 条件图 
                "change": {'color': '#da3e3e'}  # 颜色设置 
            }
        }
    }
 
    leverage = 3  # 启用3倍杠杆 
 
    def custom_stoploss(self, pair: str, trade: Trade, current_time: datetime,
                        current_rate: float, current_profit: float, **kwargs) -> float:
        """自定义止损函数"""
        if current_profit >= 0.05:  # 如果当前利润大于等于5%
            return -0.002  # 设置止损为-0.2%
        return None  # 否则不设置止损 
 
    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:
        """计算技术指标"""
        # 计算变化率 
        dataframe['change'] = 100 / dataframe['open'] * dataframe['close'] - 100 
 
        # 计算MAMA、FAMA、KAMA指标 
        dataframe['hl2'] = (dataframe['high'] + dataframe['low']) / 2  # 计算高低平均价 
        dataframe['mama'], dataframe['fama'] = ta.MAMA(dataframe['hl2'], 0.25, 0.025)  # 计算MAMA和FAMA 
        dataframe['mama_diff'] = ((dataframe['mama'] - dataframe['fama']) / dataframe['hl2'])  # 计算MAMA差值 
        dataframe['kama'] = ta.KAMA(dataframe['close'], 84)  # 计算KAMA 
 
        # 计算CTI指标 
        dataframe['cti'] = pta.cti(dataframe["close"],  length=20)  # 压缩变换指标 
 
        # 计算卖出指标 
        stoch_fast = ta.STOCHF(dataframe, 5, 3, 0, 3, 0)  # 快速随机指标 
        dataframe['fastk'] = stoch_fast['fastk']  # 提取快速K线 
 
        # 计算RSI指标 
        dataframe['rsi_84'] = ta.RSI(dataframe, timeperiod=84)  # RSI指标，周期84 
        dataframe['rsi_112'] = ta.RSI(dataframe, timeperiod=112)  # RSI指标，周期112 
 
        # 计算威廉姆斯%R指标 
        dataframe['r_14'] = williams_r(dataframe, period=14)  # 周期14的威廉姆斯%R 
 
        return dataframe 
 
    def populate_entry_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:
        """生成买入信号"""
        conditions = []  # 条件列表 
        dataframe.loc[:,  'enter_tag'] = ''  # 初始化进入标签 
 
        buy = (
                (dataframe['kama'] > dataframe['fama']) &  # KAMA大于FAMA 
                (dataframe['fama'] > dataframe['mama'] * 0.981) &  # FAMA大于MAMA的98.1%
                (dataframe['r_14'] < -61.3) &  # 威廉姆斯%R小于-61.3%
                (dataframe['mama_diff'] < -0.025) &  # MAMA差值小于-0.025%
                (dataframe['cti'] < -0.715) &  # CTI小于-0.715%
                (dataframe['close'].rolling(48).max() >= dataframe['close'] * 1.05) &  # 近48根蜡烛最高价大于等于当前价的1.05倍 
                (dataframe['close'].rolling(288).max() >= dataframe['close'] * 1.125) &  # 近288根蜡烛最高价大于等于当前价的1.125倍 
                (dataframe['rsi_84'] < 60) &  # RSI_84小于60%
                (dataframe['rsi_112'] < 60)  # RSI_112小于60%
        )
        conditions.append(buy)   # 添加买入条件 
        dataframe.loc[buy,  'enter_tag'] += 'buy'  # 标记买入标签 
 
        if conditions:  # 如果有满足条件的情况 
            dataframe.loc[reduce(lambda  x, y: x | y, conditions), 'enter_long'] = 1  # 设置买入信号 
 
        return dataframe 
 
    def populate_exit_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:
        """生成卖出信号"""
        dataframe.loc[:,  'exit_long'] = 0  # 初始化卖出信号为0 
 
        return dataframe 
 
    def custom_exit(self, pair: str, trade: 'Trade', current_time: 'datetime', current_rate: float,
                    current_profit: float, **kwargs):
        """自定义退出条件"""
        dataframe, _ = self.dp.get_analyzed_dataframe(pair=pair,  timeframe=self.timeframe)   # 获取分析后的数据框 
        current_candle = dataframe.iloc[-1].squeeze()   # 获取当前蜡烛数据 
 
        min_profit = trade.calc_profit_ratio(trade.min_rate)   # 计算最小利润比率 
 
        if self.config['runmode'].value  in ('live', 'dry_run'):  # 如果是在实盘或模拟盘模式下 
            state = self.cc   # 获取状态字典 
            pc = state.get(trade.id,  {'date': current_candle['date'], 'open': current_candle['close'], 
                                     'high': current_candle['close'], 'low': current_candle['close'], 
                                     'close': current_rate, 'volume': 0})  # 获取或初始化当前交易的状态 
 
            if current_candle['date'] != pc['date']:  # 如果当前蜡烛日期与之前不同 
                pc['date'] = current_candle['date']  # 更新日期 
                pc['high'] = current_candle['close']  # 更新最高价 
                pc['low'] = current_candle['close']   # 更新最低价 
                pc['open'] = current_candle['close']   # 更新开盘价 
                pc['close'] = current_rate             # 更新收盘价 
 
            if current_rate > pc['high']:  # 如果当前价格高于之前的最高价 
                pc['high'] = current_rate              # 更新最高价 
            if current_rate < pc['low']:               # 如果当前价格低于之前的最低价 
                pc['low'] = current_rate               # 更新最低价 
            if current_rate != pc['close']:            # 如果当前价格与之前的收盘价不同 
                pc['close'] = current_rate             # 更新收盘价 
 
            state[trade.id] = pc                      # 更新状态字典 
 
        if current_profit > 0:                        # 如果当前利润为正 
            if self.config['runmode'].value  in ('live', 'dry_run'):  
                if current_time > pc['date'] + timedelta(minutes=9) + timedelta(seconds=55):  
                    df = dataframe.copy()               # 复制数据框 
                    df = df._append(pc, ignore_index=True)  
                    stoch_fast = ta.STOCHF(df, 5, 3, 0, 3, 0)  
                    df['fastk'] = stoch_fast['fastk']  
                    cc = df.iloc[-1].squeeze()   
                    if cc["fastk"] > self.sell_fastx.value:   
                        return "fastk_profit_sell_2"  
            else:  
                if current_candle["fastk"] > self.sell_fastx.value:   
                    return "fastk_profit_sell"
 
        return None                                   # 如果不满足条件则返回None 
